# Generated by Django 5.1.2 on 2025-08-25 04:02

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BaseObservationSet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=40, null=True)),
                (
                    "candle_interval",
                    models.CharField(
                        choices=[("1m", "1m"), ("15m", "15m")], max_length=10
                    ),
                ),
            ],
            options={
                "db_table": '"public"."base_observation_sets"',
            },
        ),
        migrations.CreateModel(
            name="DataRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="data_run_id",
                    ),
                ),
                (
                    "com_or_us",
                    models.CharField(
                        choices=[("com", "com"), ("us", "us")], max_length=3
                    ),
                ),
                ("is_testnet", models.BooleanField()),
                ("base_asset", models.CharField(max_length=7)),
                ("quote_asset", models.CharField(max_length=7)),
                ("window_length", models.IntegerField(default=150)),
                (
                    "run_type",
                    models.CharField(
                        choices=[("training", "training"), ("trading", "trading")],
                        max_length=8,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": '"public"."data_runs"',
            },
        ),
        migrations.CreateModel(
            name="DerivedFeature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("method_name", models.CharField(max_length=40)),
                ("is_sequence", models.BooleanField()),
            ],
            options={
                "db_table": '"public"."derived_features"',
            },
        ),
        migrations.CreateModel(
            name="BollingerBands",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("length", models.IntegerField()),
                ("std_dev", models.FloatField()),
                ("is_sequence", models.BooleanField()),
                (
                    "base_observation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bbands",
                        to="core.baseobservationset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."bollinger_bands"',
            },
        ),
        migrations.CreateModel(
            name="EMA",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("length", models.IntegerField()),
                ("is_sequence", models.BooleanField()),
                (
                    "base_observation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emas",
                        to="core.baseobservationset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."ema"',
            },
        ),
        migrations.CreateModel(
            name="FeatureSet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=40)),
                ("window_length", models.IntegerField()),
                (
                    "base_observation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feature_sets",
                        to="core.baseobservationset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."feature_sets"',
            },
        ),
        migrations.CreateModel(
            name="DerivedfeatureSetMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "derived_feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapped_sets",
                        to="core.derivedfeature",
                    ),
                ),
                (
                    "feature_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mappings",
                        to="core.featureset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."derived_feature_mappings"',
            },
        ),
        migrations.CreateModel(
            name="MACD",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("fast", models.IntegerField()),
                ("slow", models.IntegerField()),
                ("signal", models.IntegerField()),
                ("is_sequence", models.BooleanField()),
                (
                    "base_observation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="macds",
                        to="core.baseobservationset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."macd"',
            },
        ),
        migrations.CreateModel(
            name="RSI",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("length", models.IntegerField()),
                ("is_sequence", models.BooleanField()),
                (
                    "base_observation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rsis",
                        to="core.baseobservationset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."rsi"',
            },
        ),
        migrations.CreateModel(
            name="TickData",
            fields=[
                ("price", models.FloatField(null=True)),
                ("rsi_1", models.FloatField(null=True)),
                ("rsi_2", models.FloatField(null=True)),
                ("rsi_3", models.FloatField(null=True)),
                ("rsi_4", models.FloatField(null=True)),
                ("ema_1", models.FloatField(null=True)),
                ("ema_2", models.FloatField(null=True)),
                ("ema_3", models.FloatField(null=True)),
                ("ema_4", models.FloatField(null=True)),
                ("macd_line", models.FloatField(null=True)),
                ("macd_hist", models.FloatField(null=True)),
                ("macd_signal", models.FloatField(null=True)),
                ("bb_upper", models.FloatField(null=True)),
                ("bb_middle", models.FloatField(null=True)),
                ("bb_lower", models.FloatField(null=True)),
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="tick_data_id",
                    ),
                ),
                ("timestamp", models.DateTimeField(db_index=True, unique=True)),
                (
                    "data_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.datarun"
                    ),
                ),
            ],
            options={
                "db_table": '"public"."tick_data"',
            },
        ),
        migrations.CreateModel(
            name="TickProbabilities",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("buy_prob", models.FloatField(null=True)),
                ("hold_prob", models.FloatField(null=True)),
                ("sell_prob", models.FloatField(null=True)),
                (
                    "tick_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.tickdata"
                    ),
                ),
            ],
            options={
                "db_table": '"public"."tick_probabilities"',
            },
        ),
        migrations.CreateModel(
            name="TradingSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="trading_session_id",
                    ),
                ),
                ("blocking", models.BooleanField()),
                (
                    "data_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.datarun"
                    ),
                ),
                (
                    "feature_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.featureset",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."trading_sessions"',
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                        verbose_name="single_buy_cycle_id",
                    ),
                ),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "BUY"), ("SELL", "SELL")],
                        max_length=8,
                        null=True,
                    ),
                ),
                ("strike_price", models.FloatField()),
                ("base_amount", models.FloatField()),
                (
                    "tick_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="core.tickdata",
                    ),
                ),
                (
                    "trading_session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.tradingsession",
                    ),
                ),
            ],
            options={
                "db_table": '"public"."transactions"',
            },
        ),
    ]
